#include <bits/stdc++.h>
using namespace std;

bool periksa(char ch, vector<char> rentang);
vector<string> ubahKeInfix(string masukan);

string hapusSpasi(string str);
int periksaPresedensi(char op);
vector<string> ubahKePostfix(vector<string> infix);

double lakukanOperasi(double a, double b, string op);
double evaluasiOperasi(vector<string> postfix);

int main(){
    string masukan;
    getline(cin,masukan);
    vector<string> infix = ubahKeInfix(hapusSpasi(masukan));
    vector<string> postfix = ubahKePostfix(infix);
    cout << evaluasiOperasi(postfix) << endl;
    return 0;
}

bool periksa(char ch, vector<char> rentang){
    vector<char>::iterator it;
    it = find(rentang.begin(),rentang.end(),ch);
    return it-rentang.begin() < (long int) rentang.size();
}

bool periksaString(string str, vector<string> rentang){
    vector<string>::iterator it;
    it = find(rentang.begin(),rentang.end(),str);
    return it-rentang.begin() < (long int) rentang.size();
}

string hapusSpasi(string str){
    
    vector<char> op = {'+','*','/','-','%','(',')'};
    string::iterator i = str.begin();
    string hasil;
    
    while(i != str.end()){
        if(isdigit(*i) || periksa(*i,op)){
            hasil.push_back(*i);
        }
        i++; 
    }
    return hasil;
}

vector<string> ubahKeInfix(string masukan){
    
    vector<char> op = {'+','*','/','%'};
    vector<char> kurung = {'(',')'};
    vector<string> infix;
    string temp;
    string::iterator i = masukan.begin();
    
    while(i != masukan.end()){
        if(isdigit(*i)){
            temp.push_back(*i);
            if(!isdigit(*(i+1))){
                infix.push_back(temp);
                temp.clear();
            }
        }
        else if(periksa(*i,op) || periksa(*i,kurung)){
           
            temp.push_back(*i);
            infix.push_back(temp);
            temp.clear();
        
        }
        else if(*i == '-'){
            
            if(periksa(*(i-1),op) || *(i-1) == '(' || (i == masukan.begin() && *(i+1) == '(')){
                
                infix.push_back("-1");
                infix.push_back("*");
            }
            else if(isdigit(*(i+1)) && i == masukan.begin()){
                temp.push_back('-');
            }
            else{
                infix.push_back("-");
            }
        }
        i++; 
    }
    return infix;
}

int periksaPresedensi(string op){
    int hasil = 0;
    if(op == "%" || op == "*" || op == "/"){
        hasil = 3;
    }else if(op == "+" || op == "-"){
        hasil = 4;
    }
    return hasil;
}

vector<string> ubahKePostfix(vector<string> infix){
    vector<string> op = {"+","-","*","/","%"};
    vector<string> kurung = {"(",")"};

    stack<string> hasil;
    vector<string> postfix;
    vector<string>::iterator i = infix.begin();

    while(i != infix.end()){
        if(*i == "("){
            hasil.push(*i);
        }
        else if(*i == ")"){
            
            while(!hasil.empty() && hasil.top() != "("){
                postfix.push_back(hasil.top());
                hasil.pop();
            }
            hasil.pop();
        }
        else if(periksaString(*i,op)){
            if(hasil.empty() || hasil.top() == "("){
                hasil.push(*i);
            }
            else{
                while(!hasil.empty() && hasil.top() != "(" && periksaPresedensi(*i) >= periksaPresedensi(hasil.top())){
                    postfix.push_back(hasil.top());
                    hasil.pop();
                }
                hasil.push(*i);
            }
        }
        else{
            postfix.push_back(*i);
        }
        i++;
    }

    while(!hasil.empty()){
        postfix.push_back(hasil.top());
        hasil.pop();
    }

    return postfix;
}

double evaluasiOperasi(vector<string> postfix){
    vector<string> op = {"+","-","*","/","%"};
    
    stack<double> hasil;
    vector<string>::iterator i = postfix.begin();
    double a,b,c;
    string temp;

    while(i != postfix.end()){
        if(periksaString(*i,op)){
            a = hasil.top();
            hasil.pop();
            b = hasil.top();
            hasil.pop();
            temp = *i;
            c = lakukanOperasi(a,b,temp);
            hasil.push(c);
        }
        else{
            hasil.push(strtod((*i).c_str(),NULL));
        }
        i++;
    }
    return hasil.top();
}

double lakukanOperasi(double a, double b, string op){
    double hasil;
    if(op == "+"){
        hasil = b + a;
    }
    else if(op == "-"){
        hasil = b - a;
    }
    else if(op == "*"){
        hasil = b * a;
    }
    else if(op == "/"){
        hasil = b / a;
    }
    else if(op == "%"){
        hasil = (int) b % (int) a;
    }
    return hasil;
}
